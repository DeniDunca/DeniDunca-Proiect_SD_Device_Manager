[{"/Frontend/src/index.js":"1","/Frontend/src/App.js":"2","/Frontend/src/store/AuthProvider.js":"3","/Frontend/src/PrivateRoute.js":"4","/Frontend/src/UserRoute.js":"5","/Frontend/src/AdminRoute.js":"6","/Frontend/src/store/auth-context.js":"7","/Frontend/src/pages/login_page/Login.js":"8","/Frontend/src/pages/admin_page/ManageUsers.js":"9","/Frontend/src/pages/login_page/Register.js":"10","/Frontend/src/pages/admin_page/ChatAdmin.js":"11","/Frontend/src/pages/admin_page/ManageDevices.js":"12","/Frontend/src/pages/user_page/ChatUser.js":"13","/Frontend/src/pages/admin_page/Admin.js":"14","/Frontend/src/pages/user_page/Consumption.js":"15","/Frontend/src/pages/user_page/MyDevices.js":"16","/Frontend/src/pages/user_page/User.js":"17","/Frontend/src/utils/Card.js":"18","/Frontend/src/components/device/MyConsumption.js":"19","/Frontend/src/components/device/AddDevice.js":"20","/Frontend/src/components/device/MyDevice.js":"21","/Frontend/src/components/chat/ChatTable.js":"22","/Frontend/src/components/user/AddUser.js":"23","/Frontend/src/components/device/DevicesTable.js":"24","/Frontend/src/components/user/UserTable.js":"25","/Frontend/src/components/chat/Messages.js":"26","/Frontend/src/components/chat/MessagesUser.js":"27","/Frontend/src/components/chart/BarChart.js":"28","/Frontend/src/components/chat/Message.js":"29","/Frontend/src/components/mapping/Devices.js":"30","/Frontend/src/components/mapping/Device.js":"31","/Frontend/src/components/mapping/AddDeviceForUser.js":"32"},{"size":455,"mtime":1668014127716,"results":"33","hashOfConfig":"34"},{"size":2048,"mtime":1673272468687,"results":"35","hashOfConfig":"34"},{"size":2845,"mtime":1674065925807,"results":"36","hashOfConfig":"34"},{"size":374,"mtime":1667051417121,"results":"37","hashOfConfig":"34"},{"size":363,"mtime":1667051261724,"results":"38","hashOfConfig":"34"},{"size":360,"mtime":1667051267418,"results":"39","hashOfConfig":"34"},{"size":290,"mtime":1667050156739,"results":"40","hashOfConfig":"34"},{"size":3071,"mtime":1674063594265,"results":"41","hashOfConfig":"34"},{"size":2783,"mtime":1674067403594,"results":"42","hashOfConfig":"34"},{"size":3693,"mtime":1666694012432,"results":"43","hashOfConfig":"34"},{"size":4044,"mtime":1674067403448,"results":"44","hashOfConfig":"34"},{"size":3061,"mtime":1674067403673,"results":"45","hashOfConfig":"34"},{"size":691,"mtime":1673298775743,"results":"46","hashOfConfig":"34"},{"size":812,"mtime":1672774458981,"results":"47","hashOfConfig":"34"},{"size":3844,"mtime":1674067403626,"results":"48","hashOfConfig":"34"},{"size":2997,"mtime":1674066280524,"results":"49","hashOfConfig":"34"},{"size":775,"mtime":1672859265066,"results":"50","hashOfConfig":"34"},{"size":159,"mtime":1666631710976,"results":"51","hashOfConfig":"34"},{"size":508,"mtime":1667854178726,"results":"52","hashOfConfig":"34"},{"size":2203,"mtime":1674067403640,"results":"53","hashOfConfig":"34"},{"size":503,"mtime":1667854368044,"results":"54","hashOfConfig":"34"},{"size":243,"mtime":1673370207493,"results":"55","hashOfConfig":"34"},{"size":1942,"mtime":1674067403477,"results":"56","hashOfConfig":"34"},{"size":3385,"mtime":1674070330410,"results":"57","hashOfConfig":"34"},{"size":3421,"mtime":1674067403651,"results":"58","hashOfConfig":"34"},{"size":5037,"mtime":1674067403567,"results":"59","hashOfConfig":"34"},{"size":6686,"mtime":1674067403684,"results":"60","hashOfConfig":"34"},{"size":2495,"mtime":1669502596727,"results":"61","hashOfConfig":"34"},{"size":427,"mtime":1673370087454,"results":"62","hashOfConfig":"34"},{"size":2280,"mtime":1674067403507,"results":"63","hashOfConfig":"34"},{"size":1620,"mtime":1674067403662,"results":"64","hashOfConfig":"34"},{"size":3399,"mtime":1674067403614,"results":"65","hashOfConfig":"34"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"10hh46w",{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97"},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100"},{"filePath":"101","messages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121"},{"filePath":"122","messages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124"},{"filePath":"125","messages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127"},{"filePath":"128","messages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130"},{"filePath":"131","messages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133"},{"filePath":"134","messages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"136","messages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Frontend/src/index.js",[],"/Frontend/src/App.js",["138"],"import {Route, Routes} from \"react-router-dom\";\nimport PrivateRoute from \"./PrivateRoute\";\nimport Login from \"./pages/login_page/Login\";\nimport User from \"./pages/user_page/User\";\nimport Admin from \"./pages/admin_page/Admin\";\nimport Register from \"./pages/login_page/Register\";\nimport ManageUsers from \"./pages/admin_page/ManageUsers\";\nimport {useContext, useEffect, useState} from \"react\";\nimport AuthContext from \"./store/auth-context\";\nimport UserRoute from \"./UserRoute\";\nimport AdminRoute from \"./AdminRoute\";\nimport ManageDevices from \"./pages/admin_page/ManageDevices\";\nimport MyDevices from \"./pages/user_page/MyDevices\";\nimport Consumption from \"./pages/user_page/Consumption\";\nimport ChatAdmin from \"./pages/admin_page/ChatAdmin\";\nimport ChatUser from \"./pages/user_page/ChatUser\";\n\nfunction App() {\n    const loginCtx = useContext(AuthContext);\n    const [loaded,setLoaded] = useState(false);\n\n    useEffect(() => {\n        loginCtx.setCookieData();\n        setLoaded(true);\n    },[])\n\n    if(!loaded)\n        return \"Loading...\";\n\n  return (\n\n      <Routes>\n          <Route path=\"/\" element={<PrivateRoute/>}>\n              <Route path=\"/\" element={<UserRoute/>}>\n                  <Route exact path=\"/\" element={<User/>}/>\n                  <Route exact path=\"/seeDevices\" element={<MyDevices/>}/>\n                  <Route exact path=\"/consumption\" element={<Consumption/>}/>\n                  <Route exact path=\"/userChat\" element={<ChatUser/>}/>\n              </Route>\n              <Route path=\"/\" element={<AdminRoute/>}>\n                  <Route exact path=\"/admin\" element={<Admin/>}/>\n                  <Route exact path=\"/manageUsers\" element={<ManageUsers/>}/>\n                  <Route exact path=\"/manageDevices\" element={<ManageDevices/>}/>\n                  <Route exact path=\"/adminChat\" element={<ChatAdmin/>}/>\n              </Route>\n          </Route>\n          <Route exact path=\"/login\" element={<Login/>}/>\n          <Route exact path=\"/register\" element={<Register/>}/>\n      </Routes>\n  );\n}\n\nexport default App;\n","/Frontend/src/store/AuthProvider.js",[],"/Frontend/src/PrivateRoute.js",[],"/Frontend/src/UserRoute.js",[],"/Frontend/src/AdminRoute.js",[],"/Frontend/src/store/auth-context.js",[],"/Frontend/src/pages/login_page/Login.js",[],"/Frontend/src/pages/admin_page/ManageUsers.js",[],"/Frontend/src/pages/login_page/Register.js",[],"/Frontend/src/pages/admin_page/ChatAdmin.js",[],"/Frontend/src/pages/admin_page/ManageDevices.js",[],"/Frontend/src/pages/user_page/ChatUser.js",[],"/Frontend/src/pages/admin_page/Admin.js",[],"/Frontend/src/pages/user_page/Consumption.js",["139"],"import React, {useContext, useState, useEffect} from \"react\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport AuthContext from \"../../store/auth-context\";\r\nimport classes from \"./User.module.css\";\r\nimport Card from \"../../utils/Card\";\r\nimport MyConsumption from \"../../components/device/MyConsumption\";\r\nimport BarChart from \"../../components/chart/BarChart\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport * as SockJS from \"sockjs-client\";\r\nimport {Stomp} from \"@stomp/stompjs\";\r\n\r\nconst Consumption = () => {\r\n    const [startDate, setStartDate] = useState(new Date());\r\n    const loginCtx = useContext(AuthContext);\r\n    const [devices, setDevices] = useState([]);\r\n    const [showData, setShowData] = useState(false);\r\n\r\n    useEffect(() => {\r\n        console.log(\"In Connect\");\r\n        const URL = \"http://localhost:8080/socket\";\r\n        const websocket = new SockJS(URL);\r\n        const stompClient = Stomp.over(websocket);\r\n        stompClient.connect({}, frame => {\r\n            console.log(\"Conectat la \" + frame);\r\n            stompClient.subscribe(`/notification/socket/api/consumption/${loginCtx.userId}`, notification => {\r\n                console.log(\"update received!\")\r\n                fetchDevices().then(r => console.log(\"updated\"));\r\n                if(notification.body !== \"ok\")\r\n                    alert(notification.body);\r\n            })\r\n        })\r\n    },[])\r\n\r\n    const fetchDevices = async () => {\r\n        console.log(loginCtx.userId);\r\n        const response = await fetch(`http://localhost:8080/api/user/consumption/${loginCtx.userId}/${startDate.toISOString().split('T')[0]}`,\r\n            {\r\n                headers: {'Authorization': `Bearer ${localStorage.getItem('token')}`}\r\n            });\r\n\r\n        if (!response.ok) {\r\n            throw new Error(\"Something went wrong\");\r\n        }\r\n        const responseData = await response.json();\r\n        console.log(startDate.toISOString().split('T')[0]);\r\n        const loadedDevices = [];\r\n\r\n        for(const key in responseData) {\r\n            loadedDevices.push({\r\n                id: responseData[key].id,\r\n                date: responseData[key].date,\r\n                hour: responseData[key].hour,\r\n                energyConsumption: responseData[key].energyConsumption,\r\n                deviceId: responseData[key].deviceId\r\n            });\r\n        }\r\n        setDevices(loadedDevices);\r\n    }\r\n\r\n    const send = () => {\r\n        fetchDevices().then(() => {setShowData(true)}).catch((error) => {})\r\n    }\r\n\r\n    const deviceList = devices.map(device => <MyConsumption key={device.id} id={device.id} date={device.date} hour={device.hour} energyConsumption={device.energyConsumption} deviceId={device.deviceId}/>);\r\n    return(\r\n        <div>\r\n            <h1 className={classes.h1}>Energy Consumption Page</h1>\r\n            <div className={classes.topnav}>\r\n                <NavLink to={'/'}>Home</NavLink>\r\n                <NavLink to={'/seeDevices'}>My devices</NavLink>\r\n            </div>\r\n            <Card>\r\n                <div className={classes.confirm}>\r\n                    <DatePicker selected={startDate} onChange={(date) => setStartDate(date)} />\r\n                    <button className={classes.buttonAdd} onClick={send}>Confirm</button>\r\n                </div>\r\n            </Card>\r\n            {showData &&\r\n            <Card>\r\n                <div className={classes.div}>\r\n                    <p>Date</p>\r\n                    <p>Hour</p>\r\n                    <p>Energy Consumption</p>\r\n                    <p>Device</p>\r\n                </div>\r\n                <ul className={classes.ul}>\r\n                    {deviceList}\r\n                </ul>\r\n                <BarChart values={devices}/>\r\n            </Card>}\r\n        </div>\r\n    );\r\n}\r\nexport default Consumption","/Frontend/src/pages/user_page/MyDevices.js",["140"],"import {useContext, useEffect, useState} from \"react\";\r\nimport AuthContext from \"../../store/auth-context\";\r\nimport classes from \"./User.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport Card from \"../../utils/Card\";\r\nimport MyDevice from \"../../components/device/MyDevice\";\r\n\r\nconst MyDevices = () => {\r\n\r\n    const loginCtx = useContext(AuthContext);\r\n    const [devices, setDevices] = useState([]);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [httpError, setHttpError] = useState();\r\n\r\n    const fetchDevices = async () => {\r\n        const response = await fetch(`http://localhost:8080/api/user/devices/${loginCtx.userId}`,{\r\n            headers: {'Authorization': `Bearer ${localStorage.getItem('token')}`}\r\n        });\r\n\r\n        if (!response.ok) {\r\n            throw new Error(\"Something went wrong\");\r\n        }\r\n\r\n        const responseData = await response.json();\r\n        const loadedDevices = [];\r\n\r\n        console.log(responseData);\r\n        for (const key in responseData) {\r\n            loadedDevices.push({\r\n                id: responseData[key].id,\r\n                name: responseData[key].name,\r\n                description: responseData[key].description,\r\n                address: responseData[key].address,\r\n                maxConsumption: responseData[key].maxConsumption\r\n            });\r\n        }\r\n        setDevices(loadedDevices);\r\n        setIsLoading(false);\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchDevices().catch((error) => {\r\n            setIsLoading(false);\r\n            setHttpError(error.message);\r\n        })\r\n    }, [loginCtx.userId]);\r\n\r\n    if (isLoading) {\r\n        return <section>\r\n            <p>Loading...</p>\r\n        </section>\r\n    }\r\n\r\n    if (httpError) {\r\n        return <section>\r\n            <p>{httpError}</p>\r\n        </section>\r\n    }\r\n\r\n    const update = async () => {\r\n        console.log(\"devices update\");\r\n        await fetchDevices();\r\n    }\r\n\r\n    const deviceList = devices.map(device => <MyDevice key={device.id} id={device.id} name={device.name}\r\n                                                       description={device.description} address={device.address}\r\n                                                       maxConsumption={device.maxConsumption} update={update}/>);\r\n\r\n    return (\r\n        <section>\r\n            <h1 className={classes.h1}>My devices</h1>\r\n            <div className={classes.topnav}>\r\n                <NavLink to={\"/\"}>Home</NavLink>\r\n                <NavLink to={\"/consumption\"}>Consumption</NavLink>\r\n            </div>\r\n            <Card>\r\n                <div className={classes.div}>\r\n                    <p>Name</p>\r\n                    <p>Description</p>\r\n                    <p>Address</p>\r\n                    <p>Maximum Energy Consumption</p>\r\n                </div>\r\n\r\n                <ul className={classes.ul}>\r\n                    {deviceList}\r\n                </ul>\r\n            </Card>\r\n        </section>\r\n    )\r\n\r\n}\r\nexport default MyDevices;","/Frontend/src/pages/user_page/User.js",[],"/Frontend/src/utils/Card.js",[],"/Frontend/src/components/device/MyConsumption.js",[],"/Frontend/src/components/device/AddDevice.js",[],"/Frontend/src/components/device/MyDevice.js",[],"/Frontend/src/components/chat/ChatTable.js",[],"/Frontend/src/components/user/AddUser.js",[],"/Frontend/src/components/device/DevicesTable.js",[],"/Frontend/src/components/user/UserTable.js",[],"/Frontend/src/components/chat/Messages.js",["141","142"],"import Card from \"../../utils/Card\";\r\nimport Message from \"./Message\";\r\nimport {useEffect, useRef, useState} from \"react\";\r\nimport * as SockJS from \"sockjs-client\";\r\nimport {Stomp} from \"@stomp/stompjs\";\r\n\r\n\r\nconst Messages = (props) => {\r\n    const messageAdmin = useRef();\r\n    const [message, setMessage] = useState([]);\r\n    const [messageSeen, setMessageSeen] = useState(false);\r\n    const [inputValue, setInputValue] = useState('');\r\n    const [isTyping, setIsTyping] = useState(false);\r\n\r\n    const fetchMessages = async () => {\r\n        const response = await fetch(`http://localhost:8080/api/user/getMessagesFromUser/${props.user}`,{\r\n            headers: {\r\n                'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n            }});\r\n\r\n        if (!response.ok) {\r\n            throw new Error(\"Something went wrong\");\r\n        }\r\n\r\n        const responseData = await response.json();\r\n        const loadedUsers = [];\r\n\r\n        console.log(responseData)\r\n        for(const key in responseData) {\r\n            loadedUsers.push({\r\n                from: responseData[key].from,\r\n                to: responseData[key].to,\r\n                text: responseData[key].text,\r\n            });\r\n        }\r\n        setMessage(loadedUsers);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(inputValue.length >= 1){\r\n            typing(\"typing\").catch(error => console.log(error));\r\n        } else{\r\n            typing(\"stopped typing\").catch(error => console.log(error));\r\n        }\r\n    },[inputValue])\r\n\r\n    const typing = async (msg) => {\r\n        await fetch(`http://localhost:8080/api/user/typing`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n            },\r\n            body: JSON.stringify({\r\n                from: 1,\r\n                to: props.user, // admin\r\n                text: msg\r\n            })\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        const URL = \"http://localhost:8080/socket\";\r\n        const websocket = new SockJS(URL);\r\n        const stompClient = Stomp.over(websocket);\r\n        stompClient.connect({}, frame => {\r\n            stompClient.subscribe(`/notification/socket/api/seen/1`, notification => {\r\n                setMessageSeen(true);\r\n            })\r\n        })\r\n    },[])\r\n\r\n    useEffect(() => {\r\n        const URL = \"http://localhost:8080/socket\";\r\n        const websocket = new SockJS(URL);\r\n        const stompClient = Stomp.over(websocket);\r\n        stompClient.connect({}, frame => {\r\n            stompClient.subscribe(`/notification/socket/api/typing/1`, notification => {\r\n                if(notification.body === \"typing\"){\r\n                    setIsTyping(true);\r\n                } else{\r\n                    setIsTyping(false);\r\n                }\r\n            })\r\n        })\r\n    },[])\r\n\r\n    useEffect(() => {\r\n        fetchMessages().catch(error => console.log(error));\r\n        props.messageRead();\r\n        setMessageSeen(false);\r\n    },[props.user, props.inboxMessages])\r\n\r\n    const send = async (receivedMessage) => {\r\n        await fetch(`http://localhost:8080/api/user/message`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n            },\r\n            body: JSON.stringify({\r\n                from: 1,\r\n                to: props.user, // admin\r\n                text: receivedMessage\r\n            })\r\n        })\r\n    }\r\n\r\n    const sendMessage = (event) => {\r\n        event.preventDefault();\r\n        setMessageSeen(false);\r\n        setMessage([...message,{\r\n            from: 1,\r\n            to: props.user, // admin\r\n            text: messageAdmin.current.value\r\n        }]);\r\n        console.log(messages);\r\n\r\n        send(messageAdmin.current.value).then(r => console.log(\"Message sent!\"));\r\n        messageAdmin.current.value = '';\r\n        setInputValue('');\r\n    }\r\n    const messages = message.map(msg => <Message key={Math.random()}\r\n                                                 user={1}\r\n                                                 from={msg.from}\r\n                                                 to={msg.to}\r\n                                                 message={msg.text}/>);\r\n\r\n    return(\r\n        <Card>\r\n            <div>\r\n                {messages}\r\n            </div>\r\n            <div>\r\n                <form onSubmit={sendMessage}>\r\n                    {isTyping && <p>Typing...</p>}\r\n                    <input type='text' placeholder={\"Enter message\"} ref={messageAdmin}\r\n                           value={inputValue} onChange={e => setInputValue(e.target.value)}/>\r\n                    <button>Send</button>\r\n                    {messageSeen && <p>Seen</p>}\r\n                </form>\r\n            </div>\r\n        </Card>\r\n    );\r\n}\r\nexport default Messages;","/Frontend/src/components/chat/MessagesUser.js",["143","144","145","146","147"],"import Card from \"../../utils/Card\";\r\nimport Message from \"./Message\";\r\nimport {useContext, useEffect, useRef, useState} from \"react\";\r\nimport AuthContext from \"../../store/auth-context\";\r\nimport * as SockJS from \"sockjs-client\";\r\nimport {Stomp} from \"@stomp/stompjs\";\r\n\r\n\r\nconst MessagesUser = () => {\r\n    const loginCtx = useContext(AuthContext);\r\n    const messageUser = useRef('');\r\n    const [message, setMessage] = useState([]);\r\n    const [messageSeen, setMessageSeen] = useState(false);\r\n    const [inputValue, setInputValue] = useState('');\r\n    const [isTyping, setIsTyping] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if(inputValue.length >= 1){\r\n            typing(\"typing\").catch(error => console.log(error));\r\n        } else{\r\n            typing(\"stopped typing\").catch(error => console.log(error));\r\n        }\r\n    },[inputValue])\r\n\r\n    const typing = async (msg) => {\r\n        await fetch(`http://localhost:8080/api/user/typing`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n            },\r\n            body: JSON.stringify({\r\n                from: loginCtx.userId,\r\n                to: 1, // admin\r\n                text: msg\r\n            })\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        const URL = \"http://localhost:8080/socket\";\r\n        const websocket = new SockJS(URL);\r\n        const stompClient = Stomp.over(websocket);\r\n        stompClient.connect({}, frame => {\r\n            //console.log(\"Conectat la \" + frame);\r\n            stompClient.subscribe(`/notification/socket/api/typing/${loginCtx.userId}`, notification => {\r\n                if(notification.body === \"typing\"){\r\n                    setIsTyping(true);\r\n                } else{\r\n                    setIsTyping(false);\r\n                }\r\n            })\r\n        })\r\n\r\n        return () => {\r\n            websocket.close();\r\n        };\r\n    },[])\r\n\r\n    useEffect(() => {\r\n        const URL = \"http://localhost:8080/socket\";\r\n        const websocket = new SockJS(URL);\r\n        const stompClient = Stomp.over(websocket);\r\n        stompClient.connect({}, frame => {\r\n            //console.log(\"Conectat la \" + frame);\r\n            stompClient.subscribe(`/notification/socket/api/seen/${loginCtx.userId}`, notification => {\r\n                setMessageSeen(true);\r\n            })\r\n        })\r\n\r\n        return () => {\r\n            websocket.close();\r\n        };\r\n    },[])\r\n\r\n\r\n    useEffect(() => {\r\n        const URL = \"http://localhost:8080/socket\";\r\n        const websocket = new SockJS(URL);\r\n        const stompClient = Stomp.over(websocket);\r\n        stompClient.connect({}, frame => {\r\n            //console.log(\"Conectat la \" + frame);\r\n            stompClient.subscribe(`/notification/socket/api/chat/${loginCtx.userId}`, notification => {\r\n                console.log(notification.body);\r\n                //setMessage([...message,notification.body]);\r\n                fetchMessages().catch(error => console.log(error));\r\n                messageRead().catch(error => console.log(error));\r\n                setMessageSeen(false);\r\n            })\r\n        })\r\n\r\n        return () => {\r\n            websocket.close();\r\n        };\r\n    },[])\r\n\r\n    const messageRead = async () => {\r\n        await fetch(`http://localhost:8080/api/user/messageRead`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n            },\r\n            body: JSON.stringify({\r\n                from: loginCtx.userId,\r\n                to: 1, // admin\r\n                text: \"message Read\"\r\n            })\r\n        })\r\n    }\r\n\r\n    const fetchMessages = async () => {\r\n        const response = await fetch(`http://localhost:8080/api/user/getMessages/${loginCtx.userId}`,{\r\n            headers : {\r\n                'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n            }\r\n        });\r\n\r\n        if (!response.ok) {\r\n            throw new Error(\"Something went wrong\");\r\n        }\r\n\r\n        const responseData = await response.json();\r\n        const loadedUsers = [];\r\n\r\n        console.log(responseData)\r\n        for(const key in responseData) {\r\n            loadedUsers.push({\r\n                from: responseData[key].from,\r\n                to: responseData[key].to,\r\n                text: responseData[key].text,\r\n            });\r\n        }\r\n        setMessage(loadedUsers);\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchMessages().catch(error => console.log(error));\r\n        messageRead().catch(error => console.log(error));\r\n    },[])\r\n\r\n    const send = async (receivedMessage) => {\r\n        await fetch(`http://localhost:8080/api/user/message`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n            },\r\n            body: JSON.stringify({\r\n                from: loginCtx.userId,\r\n                to: 1, // admin\r\n                text: receivedMessage\r\n            })\r\n        })\r\n    }\r\n\r\n    const sendMessage = (event) => {\r\n        event.preventDefault();\r\n        setMessageSeen(false);\r\n        setMessage([...message,{\r\n            from: loginCtx.userId,\r\n            to: 1,\r\n            text:messageUser.current.value}]);\r\n\r\n        send(messageUser.current.value).then(r => console.log(\"Message sent!\"));\r\n        messageUser.current.value = '';\r\n        setInputValue('');\r\n    }\r\n\r\n    const messages = message.map(msg => <Message key={Math.random()}\r\n                                                 user={loginCtx.userId}\r\n                                                 from={msg.from}\r\n                                                 to={msg.to}\r\n                                                 message={msg.text}/>);\r\n    return(\r\n        <Card>\r\n            <div>\r\n                {messages}\r\n            </div>\r\n            <div>\r\n                <form onSubmit={sendMessage}>\r\n                    {isTyping && <p>Typing...</p>}\r\n                    <input type='text' placeholder={\"Enter message\"} ref={messageUser}\r\n                        value={inputValue} onChange={e => setInputValue(e.target.value)}/>\r\n                    <button>Send</button>\r\n                    {messageSeen && <p>Seen</p>}\r\n                </form>\r\n            </div>\r\n        </Card>\r\n    );\r\n}\r\nexport default MessagesUser;","/Frontend/src/components/chart/BarChart.js",["148"],"import {\r\n    Chart as ChartJS,\r\n    CategoryScale,\r\n    LinearScale,\r\n    BarElement,\r\n    Title,\r\n    Tooltip,\r\n    Legend,\r\n} from 'chart.js';\r\nimport { Bar } from 'react-chartjs-2';\r\nimport Card from \"../../utils/Card\";\r\nimport {useEffect, useState} from \"react\";\r\n\r\nChartJS.register(\r\n    CategoryScale,\r\n    LinearScale,\r\n    BarElement,\r\n    Title,\r\n    Tooltip,\r\n    Legend\r\n);\r\n\r\nexport const options = {\r\n    responsive: true,\r\n    plugins: {\r\n        legend: {\r\n            position: 'top',\r\n        },\r\n        title: {\r\n            display: true,\r\n            text: 'Chart.js Bar Chart',\r\n        },\r\n    },\r\n};\r\n\r\nconst labels = [ '00:00:00', '01:00:00', '02:00:00', '03:00:00', '04:00:00', '05:00:00',\r\n                '06:00:00', '07:00:00', '08:00:00', '09:00:00', '10:00:00', '11:00:00',\r\n                '12:00:00', '13:00:00', '14:00:00', '15:00:00', '16:00:00', '17:00:00',\r\n                '18:00:00', '19:00:00', '20:00:00', '21:00:00', '22:00:00', '23:00:00'];\r\n\r\nfunction getRandomInt(max) {\r\n    return Math.floor(Math.random() * max);\r\n}\r\n\r\nconst BarChart = (props) => {\r\n    const [graphData, setGraphData] = useState([]);\r\n    let datasets = [];\r\n\r\n    useEffect(() => {\r\n        console.log(props.values);\r\n\r\n        let labels = [];\r\n        for(const key in props.values){\r\n            if(!labels.includes( props.values[key].deviceId)){\r\n               labels.push(props.values[key].deviceId);\r\n            }\r\n        }\r\n\r\n        for(const label in labels){\r\n            datasets.push({\r\n                label: labels[label],\r\n                data: //Array.apply(0, Array(24)).map(function () {}),\r\n                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\r\n                backgroundColor: `rgba(${getRandomInt(255)}, 99, 132, 0.5)`\r\n            })\r\n        }\r\n\r\n        //for(const key in datasets){\r\n            for(const value in props.values){\r\n                if(datasets[0].label === props.values[value].deviceId){\r\n                    const position = parseInt(props.values[value].hour.slice(0,2));\r\n                    datasets[0].data[position] += parseInt(props.values[value].energyConsumption);\r\n                }\r\n            }\r\n        //}\r\n        console.log(datasets);\r\n        setGraphData(datasets);\r\n    },[props.values])\r\n\r\n    const data = {\r\n        labels,\r\n        datasets: graphData,\r\n    };\r\n    return (\r\n        <Card>\r\n            <Bar options={options} data={data} />\r\n        </Card>\r\n    );\r\n}\r\nexport default BarChart;","/Frontend/src/components/chat/Message.js",["149"],"import classes from './Message.module.css'\r\nimport {useEffect} from \"react\";\r\n\r\nconst Message = (props) => {\r\n   let myMessage = false;\r\n\r\n   if(props.user === props.from){\r\n       myMessage = true;\r\n   }\r\n\r\n  const messageControlClasses = `${classes.control} ${myMessage? classes.mine: ''}`;\r\n\r\n  return(\r\n      <div className={messageControlClasses}>\r\n          {props.message}\r\n      </div>\r\n  );\r\n}\r\nexport default Message;","/Frontend/src/components/mapping/Devices.js",["150"],"import classes from \"../../pages/admin_page/Admin.module.css\";\r\nimport Card from \"../../utils/Card\";\r\nimport {useEffect, useState} from \"react\";\r\nimport Device from \"./Device\";\r\nimport AddDeviceForUser from \"./AddDeviceForUser\";\r\n\r\n\r\nconst Devices = (props) => {\r\n    const [devices, setDevices] = useState([]);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [httpError, setHttpError] = useState();\r\n\r\n    const fetchDevices = async () => {\r\n        const response = await fetch(`http://localhost:8080/api/user/devices/${props.id}`,{\r\n            headers: {'Authorization': `Bearer ${localStorage.getItem('token')}`}\r\n        });\r\n\r\n        if (!response.ok) {\r\n            throw new Error(\"Something went wrong\");\r\n        }\r\n\r\n        const responseData = await response.json();\r\n        const loadedDevices = [];\r\n\r\n        console.log(responseData);\r\n        for(const key in responseData) {\r\n            loadedDevices.push({\r\n                id: responseData[key].id,\r\n                name: responseData[key].name,\r\n                description: responseData[key].description,\r\n                address: responseData[key].address,\r\n                maxConsumption: responseData[key].maxConsumption\r\n            });\r\n        }\r\n        setDevices(loadedDevices);\r\n        setIsLoading(false);\r\n    }\r\n\r\n    useEffect(()=>{\r\n        fetchDevices().catch((error) => {\r\n            setIsLoading(false);\r\n            setHttpError(error.message);\r\n        })\r\n    },[]);\r\n\r\n    if (isLoading) {\r\n        return <section>\r\n            <p>Loading...</p>\r\n        </section>\r\n    }\r\n\r\n    if (httpError) {\r\n        return <section>\r\n            <p>{httpError}</p>\r\n        </section>\r\n    }\r\n    const update = async () => {\r\n        console.log(\"devices update\");\r\n        await fetchDevices();\r\n    }\r\n\r\n    const deviceList = devices.map(device => <Device key={device.id} id={device.id} name={device.name} description={device.description} address={device.address} maxConsumption={device.maxConsumption} update={update}/>);\r\n\r\n    return(\r\n        <Card>\r\n            <ul className={classes.ul}>\r\n                {deviceList}\r\n            </ul>\r\n            <AddDeviceForUser id={props.id} updateList={update}/>\r\n        </Card>\r\n    );\r\n}\r\n\r\nexport default Devices;","/Frontend/src/components/mapping/Device.js",[],"/Frontend/src/components/mapping/AddDeviceForUser.js",[],{"ruleId":"151","severity":1,"message":"152","line":25,"column":7,"nodeType":"153","endLine":25,"endColumn":9,"suggestions":"154"},{"ruleId":"151","severity":1,"message":"155","line":33,"column":7,"nodeType":"153","endLine":33,"endColumn":9,"suggestions":"156"},{"ruleId":"151","severity":1,"message":"157","line":46,"column":8,"nodeType":"153","endLine":46,"endColumn":25,"suggestions":"158"},{"ruleId":"151","severity":1,"message":"159","line":45,"column":7,"nodeType":"153","endLine":45,"endColumn":19,"suggestions":"160"},{"ruleId":"151","severity":1,"message":"161","line":93,"column":7,"nodeType":"153","endLine":93,"endColumn":40,"suggestions":"162"},{"ruleId":"151","severity":1,"message":"159","line":23,"column":7,"nodeType":"153","endLine":23,"endColumn":19,"suggestions":"163"},{"ruleId":"151","severity":1,"message":"164","line":59,"column":7,"nodeType":"153","endLine":59,"endColumn":9,"suggestions":"165"},{"ruleId":"151","severity":1,"message":"164","line":75,"column":7,"nodeType":"153","endLine":75,"endColumn":9,"suggestions":"166"},{"ruleId":"151","severity":1,"message":"167","line":96,"column":7,"nodeType":"153","endLine":96,"endColumn":9,"suggestions":"168"},{"ruleId":"151","severity":1,"message":"169","line":142,"column":7,"nodeType":"153","endLine":142,"endColumn":9,"suggestions":"170"},{"ruleId":"151","severity":1,"message":"171","line":78,"column":7,"nodeType":"153","endLine":78,"endColumn":21,"suggestions":"172"},{"ruleId":"173","severity":1,"message":"174","line":2,"column":9,"nodeType":"175","messageId":"176","endLine":2,"endColumn":18},{"ruleId":"151","severity":1,"message":"157","line":44,"column":7,"nodeType":"153","endLine":44,"endColumn":9,"suggestions":"177"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'loginCtx'. Either include it or remove the dependency array.","ArrayExpression",["178"],"React Hook useEffect has missing dependencies: 'fetchDevices' and 'loginCtx.userId'. Either include them or remove the dependency array.",["179"],"React Hook useEffect has a missing dependency: 'fetchDevices'. Either include it or remove the dependency array.",["180"],"React Hook useEffect has a missing dependency: 'typing'. Either include it or remove the dependency array.",["181"],"React Hook useEffect has missing dependencies: 'fetchMessages' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["182"],["183"],"React Hook useEffect has a missing dependency: 'loginCtx.userId'. Either include it or remove the dependency array.",["184"],["185"],"React Hook useEffect has missing dependencies: 'fetchMessages', 'loginCtx.userId', and 'messageRead'. Either include them or remove the dependency array.",["186"],"React Hook useEffect has missing dependencies: 'fetchMessages' and 'messageRead'. Either include them or remove the dependency array.",["187"],"React Hook useEffect has a missing dependency: 'datasets'. Either include it or remove the dependency array.",["188"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar",["189"],{"desc":"190","fix":"191"},{"desc":"192","fix":"193"},{"desc":"192","fix":"194"},{"desc":"195","fix":"196"},{"desc":"197","fix":"198"},{"desc":"195","fix":"199"},{"desc":"200","fix":"201"},{"desc":"200","fix":"202"},{"desc":"203","fix":"204"},{"desc":"205","fix":"206"},{"desc":"207","fix":"208"},{"desc":"209","fix":"210"},"Update the dependencies array to be: [loginCtx]",{"range":"211","text":"212"},"Update the dependencies array to be: [fetchDevices, loginCtx.userId]",{"range":"213","text":"214"},{"range":"215","text":"214"},"Update the dependencies array to be: [inputValue, typing]",{"range":"216","text":"217"},"Update the dependencies array to be: [props.user, props.inboxMessages, fetchMessages, props]",{"range":"218","text":"219"},{"range":"220","text":"217"},"Update the dependencies array to be: [loginCtx.userId]",{"range":"221","text":"222"},{"range":"223","text":"222"},"Update the dependencies array to be: [fetchMessages, loginCtx.userId, messageRead]",{"range":"224","text":"225"},"Update the dependencies array to be: [fetchMessages, messageRead]",{"range":"226","text":"227"},"Update the dependencies array to be: [datasets, props.values]",{"range":"228","text":"229"},"Update the dependencies array to be: [fetchDevices]",{"range":"230","text":"231"},[992,994],"[loginCtx]",[1446,1448],"[fetchDevices, loginCtx.userId]",[1596,1613],[1499,1511],"[inputValue, typing]",[3091,3124],"[props.user, props.inboxMessages, fetchMessages, props]",[842,854],[2035,2037],"[loginCtx.userId]",[2558,2560],[3332,3334],"[fetchMessages, loginCtx.userId, messageRead]",[4802,4804],"[fetchMessages, messageRead]",[2268,2282],"[datasets, props.values]",[1481,1483],"[fetchDevices]"]